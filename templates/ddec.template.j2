{%- extends "delphibase.template.j2" -%}

{%- block header -%}
{ Delphi Object declarations {{ api.generatedstr }} }
{% endblock -%}

{%- block content %}
{#- write functions -#}
{%- set tpp   = datadef.tpp.elements['tp'].tolist()  -%}
{%- for key,value in apidef.tfunc.elements.iterrows() -%}
    {%- if value['type'] == 'void' %}
   procedure {{ value['name'] }}
    {%- else                       %}
   function {{ value['name'] }}
    {%- endif -%}
    {%- if apidef.farg.elements.shape[0] > 0 -%}
       {%- set farg = apidef.farg.elements[apidef.farg.elements['name']==value['name']]  -%}
       {%- if farg.shape[0] > 0 -%}
(
       {%- set counter = namespace(argpos = 0)                                         -%}
       {%- set fe    = apidef.f.elements[apidef.f.elements['name']==value['name']]     -%}
       {%- for fkey,fvalue in fe[fe['pos'].isin(tpp)].iterrows() -%}
          {%- if counter.argpos > 0 -%} ; {% endif %}
          {%- if fvalue['type'] != 'funcptr' -%}
{{ DCall(fvalue['type']) }}{{ fvalue['arg'] }}: {{ DType(fvalue['type']) }}
          {%- else                            -%}
             {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['def']==value['name']] -%}
             {%- for fmkey,fmvalue in funcmap[funcmap['fpos']==fvalue['pos']].iterrows() if funcmap.shape[0] > 0 -%}
{{ DCall(fvalue['type']) }}{{ fvalue['arg'] }}: {{ fmvalue['name']}}
             {%- endfor %}
          {%- endif -%}
          {%- set counter.argpos = counter.argpos + 1 -%}
       {%- endfor -%}
)
       {%- endif -%}
    {%- endif -%}
    {%- if value['type'] == 'void'      -%} ;
    {%- elif value['type'] == 'funcptr' -%}
        {%- for fmkey,fmvalue in apidef.FuncMap.elements[apidef.FuncMap.elements['def']==value['name']].iterrows()  -%}
: {{ fmvalue['name'] }};
         {%- endfor %}
    {%- else                            -%}
: {{ DType(value['type']) }};
    {%- endif -%}
{%- endfor %}

{#- write properties #}
{% for key,value in apidef.tprop.elements.iterrows() %}
    {%- if value['type'] != 'funcptr' %}
   property {{ value['name'] }}: {{ DType(value['type']) }}
    {%- else                            -%}
       {%- if apidef.FuncMap.elements.shape[0] > 0 -%}
          {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos']=='p'] -%}
          {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() if funcmap.shape[0] > 0 %}
   property {{ value['name'] }}: {{ fmvalue['name'] }}
         {%- endfor %}
       {%- endif -%}
    {%- endif -%}
    {%- if apidef.pn.elements.shape[0] > 0 -%}
       {%- set pn = apidef.pn.elements[apidef.pn.elements['name']==value['name']] -%}
       {%- for pkey,pvalue in pn[pn['type']==value['type']].iterrows() %} {{ pactions(pvalue['pactions']) }} {{ pvalue['ea'] }}
       {%- endfor -%}
;
    {%- endif %}
{%- endfor %}

{ End Delphi Object declarations {{ api.generatedstr }} }
{% endblock %}
