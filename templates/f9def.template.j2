{%- extends "f9base.template.j2" -%}

{%- block header -%}
MODULE {{ apidef.F9Call }}

  ! F90 procedure wrapper {{ api.generatedstr }}
{%- endblock -%}

{%- block content %}

{#- write constants -#}
{%- for key,value in apidef.cname.elements.iterrows() %}
    {%- set counter = namespace(cstrpos = 1)      -%}
    {%- for gkey,gvalue in apidef.gcon.elements[apidef.gcon.elements['group']==value['group']].iterrows() -%}
        {%- set gconarray = apidef.gconarray.elements -%}
        {%- set len = value['maxlen'] - gvalue['len'] %}
        {%- if gconarray.shape[0] > 0 and  gconarray[gconarrray['name']==value['name']].shape[0] > 0 %}
  INTEGER(KIND=4),PARAMETER :: {{ gvalue['constant'] }} = (gconX(cname,cstring)+1):0:0;
        {%- else                                                                                     %}
  INTEGER(KIND=4),PARAMETER :: {{ gvalue['constant'] }}{{ prettyWhiteSpace(len) }}  = {{ gvalue['value'] }}
        {%- endif -%}
        {%- if counter.cstrpos == 1 %} ! {{ value['group'] }} {%- endif %}
        {%- set counter.cstrpos = counter.cstrpos + 1 %}
    {%- endfor -%} {#- apidef.gcon #}
{% endfor -%} {#- apidef.cname #}

{#- writing string constants #}
{%- for key,value in apidef.csname.elements.iterrows() -%}
    {%- set counter = namespace(cstrpos = 1) -%}
    {%- for gkey,gvalue in apidef.gstrcon.elements[apidef.gstrcon.elements['group']==value['group']].iterrows() -%}
        {%- set len = value['maxlen'] - gvalue['len'] %}
  CHARACTER(LEN=255),PARAMETER :: {{ gvalue['constant'] }}{{ prettyWhiteSpace(len) }} = '{{ gvalue['value'] }}'
        {%- if counter.cstrpos == 1 %} ! {{ value['group'] }} {%- endif %}
        {%- set counter.cstrpos = counter.cstrpos + 1 -%}
    {%- endfor -%} {#- apidef.gstrcon #}
{%- endfor -%} {#- apidef.csname #}

CONTAINS


  LOGICAL FUNCTION {{ apidef.Prefix }}Create(p{{ apidef.Prefix }}, errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}Create
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}Create
    INTEGER(KIND=8), INTENT(OUT) :: p{{ apidef.Prefix }}
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}Create

    {{ apidef.Prefix }}Create = c_{{ apidef.Prefix }}Create(p{{ apidef.Prefix }}, loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}Create

  LOGICAL FUNCTION {{ apidef.Prefix }}CreateD(p{{ apidef.Prefix }}, dirName, errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}CreateD
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}CreateD
    INTEGER(KIND=8), INTENT(OUT) :: p{{ apidef.Prefix }}
    CHARACTER(LEN=*), INTENT(IN) :: dirName
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}CreateD

    {{ apidef.Prefix }}CreateD = c_{{ apidef.Prefix }}CreateD(p{{ apidef.Prefix }}, loc(dirName), %val(len(dirName)), &
         loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}CreateD

{%- if usecd %}
  LOGICAL FUNCTION {{ apidef.Prefix }}CreateDD(p{{ apidef.Prefix }}, dirName, errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}CreateDD
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}CreateDD
    INTEGER(KIND=8), INTENT(OUT) :: p{{ apidef.Prefix }}
    CHARACTER(LEN=*), INTENT(IN) :: dirName
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}CreateDD
    {{ apidef.Prefix }}CreateDD = c_{{ apidef.Prefix }}CreateDD(p{{ apidef.Prefix }}, loc(dirName), %val(len(dirName)), &
         loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}CreateDD
{% endif  %}

  LOGICAL FUNCTION {{ apidef.Prefix }}CreateL(p{{ apidef.Prefix }}, libName, errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}CreateL
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}CreateL
    INTEGER(KIND=8), INTENT(OUT) :: p{{ apidef.Prefix }}
    CHARACTER(LEN=*), INTENT(IN) :: libName
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}CreateL

    {{ apidef.Prefix }}CreateL = c_{{ apidef.Prefix }}CreateL(p{{ apidef.Prefix }}, loc(libName), %val(len(libName)), &
         loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}CreateL

  LOGICAL FUNCTION {{ apidef.Prefix }}GetReady(errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}GetReady
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}GetReady
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}GetReady

    {{ apidef.Prefix }}GetReady = c_{{ apidef.Prefix }}GetReady(loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}GetReady

  LOGICAL FUNCTION {{ apidef.Prefix }}GetReadyD(dirName, errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}GetReadyD
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}GetReadyD
    CHARACTER(LEN=*), INTENT(IN) :: dirName
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}GetReadyD

    {{ apidef.Prefix }}GetReadyD = c_{{ apidef.Prefix }}GetReadyD(loc(dirName), %val(len(dirName)), &
         loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}GetReadyD

  LOGICAL FUNCTION {{ apidef.Prefix }}GetReadyL(libName, errMsg)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}GetReadyL
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}GetReadyL
    CHARACTER(LEN=*), INTENT(IN) :: libName
    CHARACTER(LEN=*), INTENT(OUT) :: errMsg
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}GetReadyL

    {{ apidef.Prefix }}GetReadyL = c_{{ apidef.Prefix }}GetReadyL(loc(libName), %val(len(libName)), &
         loc(errMsg), %val(len(errMsg)))
  END FUNCTION {{ apidef.Prefix }}GetReadyL

  SUBROUTINE {{ apidef.Prefix }}Exit(i)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}Exit
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}Exit
    INTEGER(KIND=4), INTENT(IN) :: i

    CALL c_{{ apidef.Prefix }}Exit(%val(i))
  END SUBROUTINE {{ apidef.Prefix }}Exit

  LOGICAL FUNCTION {{ apidef.Prefix }}Free(p{{ apidef.Prefix }})
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}Free
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}Free
    INTEGER(KIND=8), INTENT(OUT) :: p{{ apidef.Prefix }}
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}Free

    {{ apidef.Prefix }}Free = c_{{ apidef.Prefix }}Free(p{{ apidef.Prefix }})
  END FUNCTION {{ apidef.Prefix }}Free

  LOGICAL FUNCTION {{ apidef.Prefix }}GetScreenIndicator()
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}GetScreenIndicator
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}GetScreenIndicator
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}GetScreenIndicator

    {{ apidef.Prefix }}GetScreenIndicator = c_{{ apidef.Prefix }}GetScreenIndicator()
  END FUNCTION {{ apidef.Prefix }}GetScreenIndicator

  SUBROUTINE {{ apidef.Prefix }}SetScreenIndicator(scrInd)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}SetScreenIndicator
    INTEGER(KIND=4), INTENT(IN) :: scrInd
    EXTERNAL c_{{ apidef.Prefix }}SetScreenIndicator

    CALL c_{{ apidef.Prefix }}SetScreenIndicator(%val(scrInd))
  END SUBROUTINE {{ apidef.Prefix }}SetScreenIndicator

  LOGICAL FUNCTION {{ apidef.Prefix }}GetExitIndicator()
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}GetExitIndicator
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}GetExitIndicator
    LOGICAL(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}GetExitIndicator

    {{ apidef.Prefix }}GetExitIndicator = c_{{ apidef.Prefix }}GetExitIndicator()
  END FUNCTION {{ apidef.Prefix }}GetExitIndicator

  SUBROUTINE {{ apidef.Prefix }}SetExitIndicator(extInd)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}SetExitIndicator
    INTEGER(KIND=4), INTENT(IN) :: extInd
    EXTERNAL c_{{ apidef.Prefix }}SetExitIndicator

    CALL c_{{ apidef.Prefix }}SetExitIndicator(%val(extInd))
  END SUBROUTINE {{ apidef.Prefix }}SetExitIndicator

  SUBROUTINE {{ apidef.Prefix }}SetErrorCallback(cbFunc)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}SetErrorCallback
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}SetErrorCallback
    INTEGER(KIND=4), EXTERNAL :: cbFunc

    CALL c_{{ apidef.Prefix }}SetErrorCallback(cbFunc)
  END SUBROUTINE {{ apidef.Prefix }}SetErrorCallback

  INTEGER FUNCTION {{ apidef.Prefix }}GetAPIErrorCount()
    !DEC$ ATTRIBUTES STDCALL :: c_{{ apidef.Prefix }}GetAPIErrorCount
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ apidef.Prefix }}GetAPIErrorCount
   INTEGER(KIND=4), EXTERNAL :: c_{{ apidef.Prefix }}GetAPIErrorCount

    {{ apidef.Prefix }}GetAPIErrorCount = c_{{ apidef.Prefix }}GetAPIErrorCount()
  END FUNCTION {{ apidef.Prefix }}GetAPIErrorCount

{%- for key,value in apidef.tfunc.elements.iterrows()
    if apidef.f90Skip.elements.shape[0] == 0 or value['name'] not in apidef.f90Skip.elements['name'].tolist() -%}
    {%- set column = namespace(value=0) %}
    {%- if value['type'] == 'void' %}
  SUBROUTINE
       {%- set column.value = 12 -%}
    {%- elif value['type'] in ['pc','oss'] %}
  CHARACTER(LEN=255) FUNCTION
       {%- set column.value = 22 -%}
    {%- else                               %}
  {{ FType(value['type']) }} FUNCTION
       {%- set column.value = FType(value['type'])|length + 12 -%}
    {%- endif %} {{ value['name'] }}(p{{ apidef.Prefix }}
    {%- set column.value = column.value + value['name']|length  + apidef.Prefix|length + 2 -%}
    {%- set fnames = apidef.f.elements[apidef.f.elements['name']==value['name']] -%}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() if fnames.shape[0] > 0 -%}
{#-      if(file.cc > 65, put ' &' / '         ' ); -#}
      {%- if column.value >= 65 -%} , &
         {{ fvalue['arg'] }}
         {%- set column.value = 9 -%}
      {%- else                -%}
,{{ fvalue['arg'] }}
      {%- endif -%}
      {%- set column.value = column.value + fvalue['arg']|length + 1 -%}
    {%- endfor -%} {#- apidef.f -#}
)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ value['name'] }}
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ value['name'] }}
    INTEGER(KIND=8), INTENT(IN) :: p{{ apidef.Prefix }}
    {%- set fnames = apidef.f.elements[apidef.f.elements['name']==value['name']] -%}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() -%}
        {%- if fvalue['type'] != 'funcptr' %}
    {{ FType(fvalue['type']) }}{{ FIntent(fvalue['type']) }} :: {{ fvalue['arg'] }}
            {%- if fvalue['type'] in ['bool','vbool'] %}
    INTEGER(KIND=4) :: ib_{{ fvalue['arg'] }}
            {%- endif -%}
        {%- else                           -%}
          {%-if apidef.FuncMap.elements.shape[0] > 0 -%}
            {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'].isin(tpp)] -%}
            {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() if funcmap.shape[0] > 0 -%}
                {%- for ptfkey,ptfvalue in apidef.tPtrFunc.elements[apidef.tPtrFunc.elements['name']==fmvalue['name']].iterrows() -%}
                   {%- if ptfvalue['type'] == 'void'  %}
    EXTERNAL {{ fvalue['arg'] }}
                   {%- else                           %}
    {{ FType(ptfvalue['type']) }}, EXTERNAL :: {{ fvalue['arg'] }}
                   {%- endif %}
                {%- endfor -%} {#- apidef.tPtrFunc -#}
            {%- endfor -%} {#- apidef.FuncMap -#}
          {%- endif -%}
        {%- endif -%}
    {%- endfor -%} {#- apidef.f -#}
    {%- if value['type'] == 'void'         %}
    EXTERNAL :: c_{{ value['name'] }}
    {%- else                              -%}
        {%- if value['type'] in ['pc','oss'] %}
    CHARACTER(LEN=255)
        {%- elif value['type'] == 'bool'     %}
    INTEGER(KIND=4)
        {%- else                             %}
    {{ FType(value['type']) }}
        {%- endif %}, EXTERNAL :: c_{{ value['name'] }}
    {%- endif -%}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() if fvalue['type'] in ['bool','vbool'] %}
    ib_{{ fvalue['arg'] }} = 0
    IF ({{ fvalue['arg'] }}) ib_{{ fvalue['arg'] }} = 1
    {%- endfor -%} {#- apidef.f -#}
    {%- set column.value = 0 -%}
    {%- if value['type'] == 'void' %}

    CALL c_{{ value['name'] }}(%val(p{{ apidef.Prefix }})
      {%- set column.value = 11 + value['type']|length + 7 + apidef.Prefix|length + 1 -%}
    {%- else                       %}

    {{ value['name'] }}=c_{{ value['name'] }}(%val(p{{ apidef.Prefix }})
      {%- set column.value = 4 + value['name']|length + 3 + value['name']|length + 7 + apidef.Prefix|length + 1 -%}
    {%- endif -%}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() -%}
{#      if(file.cc > 65, put ' &' / '         ' ); -#}
      {%- if column.value >= 65 -%} , &
         {% set column.value = 9 -%}
         {%- if fvalue['type'] in datadef.FChar.elements['ta'].tolist()  -%}
{#-   %val(loc({{ fvalue['name'] }})),%val(len({{ fvalue['name'] }}))
*  This is a problem on some broken sgi compilers, so pass by ref -#}
loc({{ fvalue['arg'] }}),%val(len({{ fvalue['arg'] }}))
            {%- set column.value = column.value + 4 + fvalue['arg']|length + 11 + fvalue['arg']|length + 2 -%}
         {%- elif fvalue['type'] == 'bool'                               -%} %val(ib_{{ fvalue['arg'] }})
            {%- set column.value = column.value + 8 + fvalue['arg']|length + 1 -%}
         {%- elif fvalue['type'] == 'vbool'                              -%} ib_{{ fvalue['arg'] }}
            {%- set column.value = column.value + 3 + fvalue['arg']|length -%}
         {%- elif fvalue['type'] in datadef.FVal.elements['ta'].tolist() -%} %val({{ fvalue['arg'] }})
            {%- set column.value = column.value + 5 + fvalue['arg']|length + 1 -%}
         {%- elif fvalue['type'] in ['c','vc']                           -%} %val(loc({{ fvalue['arg'] }}))
            {%- set column.value = column.value + 9 + fvalue['arg']|length + 2 -%}
         {%- else                                                        -%} {{ fvalue['arg'] }}
            {%- set column.value = column.value + fvalue['arg']|length  -%}
         {%- endif -%}
      {% else                                         -%}
         {%- if fvalue['type'] in datadef.FChar.elements['ta'].tolist()  -%}
{#-   %val(loc({{ fvalue['name'] }})),%val(len({{ fvalue['name'] }}))
*  This is a problem on some broken sgi compilers, so pass by ref -#}
,loc({{ fvalue['arg'] }}),%val(len({{ fvalue['arg'] }}))
            {%- set column.value = column.value + 5 + fvalue['arg']|length + 11 + fvalue['arg']|length + 2 -%}
         {%- elif fvalue['type'] == 'bool'                               -%} ,%val(ib_{{ fvalue['arg'] }})
            {%- set column.value = column.value + 9 + fvalue['arg']|length + 1 -%}
         {%- elif fvalue['type'] == 'vbool'                              -%} ,ib_{{ fvalue['arg'] }}
            {%- set column.value = column.value + 4 + fvalue['arg']|length  -%}
         {%- elif fvalue['type'] in datadef.FVal.elements['ta'].tolist() -%} ,%val({{ fvalue['arg'] }})
            {%- set column.value = column.value + 6 + fvalue['arg']|length + 1 -%}
         {%- elif fvalue['type'] in ['c','vc']                           -%} ,%val(loc({{ fvalue['arg'] }}))
            {%- set column.value = column.value + 10 + fvalue['arg']|length + 2 -%}
         {%- else                                                        -%} ,{{ fvalue['arg'] }}
            {%- set column.value = column.value + 1 + fvalue['arg']|length  -%}
         {%- endif -%}
      {% endif -%}
    {%- endfor -%} {#- apidef.f -#}
)
    {%- if value['type'] == 'bool' %} /= 0
    {%- endif %}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() if fvalue['type'] == 'vbool' %}
    {{ fvalue['arg'] }} = ib_{{ fvalue['arg'] }} /= 0
    {%- endfor -%} {#- apidef.f #}
  END
    {%- if value['type'] == 'void' %} SUBROUTINE
    {%- else                       %} FUNCTION
    {%- endif %} {{ value['name'] }}
{% endfor %}

  ! properties

{%- for key,value in apidef.pn.elements.iterrows() 
    if apidef.f90Skip.elements.shape[0] == 0 or value['name'] not in apidef.f90Skip.elements['name'].tolist() -%}
    {%- if value['pactions'] == 'r' -%}
        {%- if value['type'] in ['pc','oss'] %}

  CHARACTER(LEN=255)
        {%- else                             %}

  {{ FType(value['type']) }}
        {%- endif %} FUNCTION {{ value['name'] }}(p{{ apidef.Prefix }})
    !DEC$ ATTRIBUTES STDCALL :: c_{{ value['name'] }}
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ value['name'] }}
    INTEGER(KIND=8), INTENT(IN) :: p{{ apidef.Prefix }}

        {%- if value['type'] in ['pc','oss']   %}
    CHARACTER(LEN=255)
        {%- elif value['type'] in ['bool']     %}
    INTEGER(KIND=4)
        {%- else                               %}
    {{ FType(value['type']) }}
        {%- endif -%} , EXTERNAL :: c_{{ value['name'] }}

    {{ value['name'] }}=c_{{ value['name'] }}(%val(p{{ apidef.Prefix }}))
        {%- if value['type'] in ['bool']  %} /= 0
        {%- endif %}
  END FUNCTION {{ value['name'] }}
    {%- else                        %}

  SUBROUTINE {{ value['name'] }}Set(p{{ apidef.Prefix }},x)
    !DEC$ ATTRIBUTES STDCALL :: c_{{ value['name'] }}Set
    !DEC$ ATTRIBUTES REFERENCE :: c_{{ value['name'] }}Set
    INTEGER(KIND=8), INTENT(IN) :: p{{ apidef.Prefix }}
        {%- if value['type'] != 'funcptr' %}
    {{ FType(value['type']) }}, INTENT(IN) :: x
            {%- if value['type'] == 'bool' %}
    INTEGER(KIND=4) :: ib_x
            {%- endif -%}
        {%- else                          -%}
            {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == 'p'] -%}
            {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() -%}
                {%- for tptrfkey,tptrfvalue in apidef.tPtrFunc.elements.iterrows() -%}
                    {%- if tptrfvalue['type'] != 'void' %}
    EXTERNAL x
                    {%- else                            %}
    {{ FType(tptrfvalue['type']) }}}, EXTERNAL :: x
                    {%- endif -%}
                {%- endfor -%} {#- apidef.tPtrFunc -#}
            {%- endfor -%} {#- apidef.FuncMap -#}
        {%- endif %}
    EXTERNAL c_{{ value['name'] }}Set
        {%- if value['type'] in ['bool']  %}

    ib_x = 0
    IF (x) ib_x = 1
        {%- endif %}

    CALL c_{{ value['name'] }}Set(%val(p{{ apidef.Prefix }}),
        {%- if value['type'] in datadef.FChar.elements['ta'].tolist() -%} loc(x),%val(len(x)))
        {%- elif value['type'] == 'funcptr'                           -%} x)
        {%- elif value['type'] == 'c'                                 -%} loc(x))
        {%- elif value['type'] == 'bool'                              -%} %val(ib_x))
        {%- else                                                      -%} %val(x))
        {%- endif                                                      %}
  END SUBROUTINE {{ value['name'] }}Set
    {%- endif                       %}
{%- endfor %}

END MODULE {{ apidef.F9Call }}

{% endblock -%}
