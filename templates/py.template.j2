{%- extends "cbase.template.j2" -%}

{%- block header -%}
SWIG interface code {{ api.generatedstr }}
{%- endblock -%}

{%- block content -%}
%module(moduleimport="from gams.core.{{ apidef.CCall[:3] }} import $module") {{ apidef.CCall }}

%include cpointer.i
%include typemaps.i
%include carrays.i
%include cstring.i

%{
/* Put header files here or function declarations like below */
#define SWIG_FILE_WITH_INIT
#include "{{ apidef.CCall }}.h"
#include "gclgms.h"
#define {{ apidef.Prefix }}HandleToPtr
#define ptrTo{{ apidef.Prefix }}Handle
%}

{%- if apidef.haveInt64.elements.shape[0] > 0 -%}
   {%- if apidef.haveInt64.elements[apidef.haveInt64.elements['prefix']==apidef.Prefix].shape[0] > 0 %}
%apply long long { INT64 };
%apply const long long& { const INT64& };

   {%- endif %}
{% endif %}

{#- writing integer constants #}
{%- for ikey,ivalue in apidef.iconst.elements.iterrows() %}
#define {{ ivalue['constant'] }} {{ ivalue['value'] }}
{%- endfor -%} {#- apidef.iconst #}

{#- writing enumerate constants #}
{% for key,value in apidef.cname.elements.iterrows() %}
enum {{ value['group'] }} {
    {%- set counter = namespace(cpos = 1) -%}
    {%- set gcon = apidef.gcon.elements[apidef.gcon.elements['group']==value['group']] -%}
    {%- for gkey,gvalue in gcon.iterrows() -%}
        {%- set len = value['maxlen'] - gvalue['len'] %}
  {{ gvalue['constant'] }}{{ prettyWhiteSpace(len) }} = {{ gvalue['value']}}
        {%- if counter.cpos < gcon.shape[0] -%} , {%- endif -%}
        {%- set counter.cpos = counter.cpos + 1 -%}
    {%- endfor -%} {#- apidef.gcon #}  };
{% endfor -%} {#- apidef.cname #}

{#- writing double constants #}
{%- for dkey,dvalue in apidef.dconst.elements.iterrows() %}
#define {{ dvalue['constant'] }} {{ dvalue['value'] }}
{%- endfor -%} {#- apidef.dconst #}

{#- writing string constants #}
{%- for skey,svalue in apidef.sconst.elements.iterrows() %}
#define {{ svalue['constant'] }} "{{ svalue['value'] }}"
{% endfor %} {#- apidef.sconst #}

{#- writing string constants #}
{% for key,value in apidef.csname.elements.iterrows() -%}
    {%- set counter = namespace(cstrpos = 1) -%}
    {%- for gkey,gvalue in apidef.gstrcon.elements[apidef.gstrcon.elements['group']==value['group']].iterrows() -%}
        {%- set len = value['maxlen'] - gvalue['len'] %}
        {%- if counter.cstrpos == 1 %}
#define {{ gvalue['constant'] }}{{ prettyWhiteSpace(len) }} "{{ gvalue['value'] }}"  /* {{ gvalue['group'] }} */
        {%- else                     %}
#define {{ gvalue['constant'] }}{{ prettyWhiteSpace(len) }} "{{ gvalue['value'] }}"
        {%- endif -%}
        {%- set counter.cstrpos = counter.cstrpos + 1 -%}
    {%- endfor -%} {#- apidef.gstrcon #}
{% endfor -%} {#- apidef.csname #}

{%- set fcsi = apidef.f.elements[apidef.f.elements['type'] == 'csi']['arg'].drop_duplicates().tolist() -%}
{%- if fcsi %}
// This tells SWIG to treat char ** as a special case
// but this is only save for input-values
{%- endif %}
{%- for arg in fcsi %}
%typemap(in) char *{{ arg }}_in[](PyObject* stringList){
  /* Check if is a list */
  if (PyList_Check($input)) {
    int i = 0;
    int listSize = PyList_Size($input);
    $1 = (char **) malloc((listSize+1)*sizeof(char *));
    stringList = PyList_New(listSize);
    for (i = 0; i < listSize; i++) {
      PyObject *o = PyList_GetItem($input,i);
      if (PyUnicode_Check(o)) {
        o = PyUnicode_AsUTF8String(o);
        PyList_SetItem(stringList,  i, o);
        $1[i] = PyString_AsString(o);
      }
      else {
        PyErr_SetString(PyExc_TypeError,"list must contain strings");
        free($1);
        return NULL;
      }
    }
    $1[i] = 0;
  } else {
    PyErr_SetString(PyExc_TypeError,"not a list");
    return NULL;
  }
}

%typemap(freearg) char *{{ arg }}_in[]{
  Py_DECREF(stringList$argnum);
  free((char **) $1);
}
{% endfor -%} {#- fcsi #}

{% set fvii = apidef.f.elements[apidef.f.elements['type'] == 'vii']['arg'].drop_duplicates().tolist() -%}
{%- if fvii %}
// special treatment for out int arrays
{%- endif %}
{%- for arg in fvii -%}
    {%- set pySpecVii = false -%}
    {%- if ((apidef.pySpecVii is defined) and (apidef.pySpecVii.elements.shape[0] > 0))-%}
        {%- set pySpecVii = (apidef.pySpecVii.elements[apidef.pySpecVii.elements['name'] ==value['name']].shape[0] > 0) -%}
    {%- endif %}
    {%- if not pySpecVii  %}
%typemap(in, numinputs=0) int {{ arg }}_out[]{
  static gdxUelIndex_t {{ arg }};
  $1 = {{ arg }};
}

%typemap(argout) int {{ arg }}_out[]{
    int loc_i = 0;
    PyObject *list;
   {%- set MaxDimStyle = '' -%}
   {%- if ((apidef.MaxDimStyle is defined) and (apidef.MaxDimStyle.elements.shape[0] > 0)) -%}
        {%- set mds = apidef.MaxDimStyle.elements[apidef.MaxDimStyle.elements['prefix']==apidef.Prefix] -%}
        {%- if mds.shape[0] > 0 -%} {%- set MaxDimStyle = mds['prefix'].iloc[0] -%} {%- endif -%}
   {%- endif -%}
   {%- if MaxDimStyle == ''      %}
    int loc_dim = GLOBAL_MAX_INDEX_DIM;
   {%- elif MaxDimStyle == 'gdx' %}
    int loc_dim = gdxCurrentDim(arg1);
   {%- elif MaxDimStyle == 'gmd' %}
    /* This is a strong assumption... */
    int loc_dim = arg3;
   {%- endif %}
    list = PyList_New(loc_dim);
    for(loc_i=0; loc_i<loc_dim; loc_i++){
      PyList_SetItem(list, loc_i, PyInt_FromLong($1[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}
    {%- else             -%}
%typemap(in, numinputs=0) int {{ arg }}_out[]{
  static gdxUelIndex_t {{ arg }};
  $1 = {{ arg }};
}

%typemap(argout) int {{ arg }}_out[]{
    char VarName[GMS_SSSIZE];
    int VarTyp = 0;
    int loc_dim = 0;
    int loc_i = 0;
    PyObject *list = 0;
    gdxSymbolInfo(arg1, arg2, VarName,&loc_dim,&VarTyp);
    list = PyList_New(loc_dim);
    for(loc_i=0; loc_i<loc_dim; loc_i++){
      PyList_SetItem(list, loc_i, PyInt_FromLong($1[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}
    {%- endif %}

{% endfor -%} {#- fvii #}

{#- *This is ugly: We need some special treatment for gdxSymbolGetDomain and rely on a combination of argument names -#}
{%- if apidef.Prefix == 'gdx' -%}
%typemap(argout) (int SyNr, int DomainSyNrs_out[]){
    int loc_i = 0;
    PyObject *list;
    int loc_dim = gdxSymbolDim(arg1, $1);
    list = PyList_New(loc_dim);
    for(loc_i=0; loc_i<loc_dim; loc_i++){
      PyList_SetItem(list, loc_i, PyInt_FromLong($2[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}
{% endif %}

{#- LW 5 -> const -#}
{%- set fvrv = apidef.f.elements[apidef.f.elements['type'] == 'vrv']['arg'].drop_duplicates().tolist() -%}
{%- if fvrv %}
// special treatment for out double arrays
{%- endif %}
{%- for arg in fvrv %}
%typemap(in, numinputs=0) double {{ arg }}_out[]{
  static gdxValues_t {{ arg }};
  $1 = {{ arg }};
}

%typemap(argout) double {{ arg }}_out[]{
    int loc_i = 0;
    PyObject *list = PyList_New(5);
    for(loc_i=0; loc_i<5; loc_i++){
      PyList_SetItem(list, loc_i, PyFloat_FromDouble($1[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}
{% endfor -%} {#- fvrv #}

{%- set fosi = apidef.f.elements[apidef.f.elements['type'] == 'osi']['arg'].drop_duplicates().tolist() -%}
{%- if fosi %}
// special treatment for out string arrays
{%- endif %}
{%- for arg in fosi %}
%typemap(in, numinputs=0) char *{{ arg }}_out[]{
  static gdxStrIndexPtrs_t {{ arg }};
  static gdxStrIndex_t     {{ arg }}XXX;
  GDXSTRINDEXPTRS_INIT({{ arg }}XXX, {{ arg }});
  $1 = {{ arg }};
}

%typemap(argout) char *{{ arg }}_out[]{
    int loc_i = 0;
    PyObject *list;
   {%- set MaxDimStyle = '' -%}
   {%- if ((apidef.MaxDimStyle is defined) and (apidef.MaxDimStyle.elements.shape[0] > 0)) -%}
        {%- set mds = apidef.MaxDimStyle.elements[apidef.MaxDimStyle.elements['prefix']==apidef.Prefix] -%}
        {%- if mds.shape[0] > 0 -%} {%- set MaxDimStyle = mds['prefix'].iloc[0] -%} {%- endif -%}
   {%- endif -%}
   {%- if MaxDimStyle == ''      %}
    int loc_dim = GLOBAL_MAX_INDEX_DIM;
   {%- elif MaxDimStyle == 'gdx' %}
    int loc_dim = gdxCurrentDim(arg1);
   {%- elif MaxDimStyle == 'gmd' %}
    /* This is a strong assumption... */
    int loc_dim = arg3;
   {%- endif %}
    list = PyList_New(loc_dim);
    for(loc_i=0; loc_i<loc_dim; loc_i++){
      PyList_SetItem(list, loc_i, PyString_FromString($1[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}
{% endfor -%} {#- fosi #}

{#- This is ugly: We need some special treatment for gdxSymbolGetDomainX and rely on a combination of argument names -#}
{%- if apidef.Prefix.upper()=='GDX' %}
%typemap(argout) (int SyNr, char *DomainIDs_out[]){
    int loc_i = 0;
    PyObject *list;
    int loc_dim = gdxSymbolDim(arg1, $1);
    list = PyList_New(loc_dim);
    for(loc_i=0; loc_i<loc_dim; loc_i++){
      PyList_SetItem(list, loc_i, PyString_FromString($2[loc_i]));
    }
    $result = SWIG_Python_AppendOutput($result, list);
}
{%- endif %}


{#- This is ugly: We need some special treatment for vDomPtr arguments (distinguish by name if it is used as in or out argmunent, the type is vPtr in both cases) -#}
{%- if apidef.Prefix.upper()=='GMD' %}
//remove **vDomPtr_out from the agument list in python and create the void** in C
%typemap(in, numinputs=0) void **vDomPtrOut{
  void *domains[GMS_MAX_INDEX_DIM];
  $1 = domains;
}

//add a list of pointers to the GMSSymbols to the return for Python
%typemap(argout) (int aDim, void **vDomPtrOut){
  int loc_i;
  PyObject* list = PyList_New($1);
  for(loc_i=0; loc_i<$1; loc_i++)
  {
    PyObject* sym_ptr = SWIG_NewPointerObj(SWIG_as_voidptr($2[loc_i]), SWIGTYPE_p_void, 0 |  0 );
    PyList_SetItem(list, loc_i, sym_ptr);
  }
  $result = SWIG_Python_AppendOutput($result, list);
}

%typemap(in) void **vDomPtrIn{
  /* Check if is a list */
  if (PyList_Check($input)) {
      int size = PyList_Size($input);
      $1 = (void **) malloc((size+1)*sizeof(void *));
      int i = 0;

      for (i = 0; i < size; i++) {
        void *p;
        PyObject *o = PyList_GetItem($input,i);
        int res = SWIG_ConvertPtr(o,SWIG_as_voidptrptr(&p), SWIGTYPE_p_void, 0);
        if (!SWIG_IsOK(res))
        {
          SWIG_exception_fail(SWIG_ArgError(res), "in method '" "gmdAddSymbolX" "', argument " " of type '" "void *""'");
        }
        $1[i] = p;
      }
    }
    else {
    PyErr_SetString(PyExc_TypeError,"not a list");
    return NULL;
  }
}

%typemap(freearg) void **vDomPtrIn{
  free((void *) $1);
}
{%- endif %}

{%- set fint64 = apidef.f.elements[apidef.f.elements['type'].isin(['oint64','vint64'])]['arg'].drop_duplicates().tolist() -%}
{%- if fint64 %}
// special treatment for out Int64
{%- endif %}
{%- for arg in fint64 %}
%typemap(in, fragment=SWIG_AsVal_frag(long long)) INT64 *{{ arg }}_out{
long long val = 0;
    int ecode = SWIG_AsVal_long_SS_long($input, &val);
    if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "$symname" "', argument " " of type '" "INT64""'");
    }
    $1 = (INT64*)(&val);
}

%typemap(argout, fragment=SWIG_From_frag(long long)) INT64 *{{ arg }}_out{
    $result = SWIG_Python_AppendOutput($result, SWIG_From_long_SS_long((long long)(*$1)));
}

{%- endfor -%} {#- fvint64 #}

%array_class(int, intArray);
%array_class(double, doubleArray);
%pointer_functions(int, intp);
%pointer_functions(double, doublep);
%pointer_functions({{ apidef.Prefix }}Handle_t, {{ apidef.Prefix }}Handle_tp);

%typemap(in) void *{
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
  }
}

%typemap(in) void **{
    void *$1__p;
    int res = SWIG_ConvertPtr($input,SWIG_as_voidptrptr(&$1__p), SWIGTYPE_p_void, 0);
    if (!SWIG_IsOK(res)) {
    SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " " of type '" "void *""'");
    }
    $1 = &$1__p;
}

%typemap(out) {{ apidef.Prefix }}Handle_t {
  resultobj = SWIG_NewPointerObj(({{ apidef.Prefix }}Handle_t *)memcpy(({{ apidef.Prefix }}Handle_t *)malloc(sizeof({{ apidef.Prefix }}Handle_t)),&result,sizeof({{ apidef.Prefix }}Handle_t)), SWIGTYPE_p_{{ apidef.Prefix }}Handle_t, 0 |  0 );
}

{%- for key,value in apidef.tPtrFunc.elements.iterrows() %}

%typemap(in) {{ value['name'] }}_t{
    if ($input == Py_None)
      $1 = NULL;
    else
    {
      void *argp;
      int ret = SWIG_ConvertPtr($input, &argp, SWIGTYPE_p_{{ value['name'] }}_t,  0 );
      if (!SWIG_IsOK(ret)) {
        SWIG_exception_fail(SWIG_ArgError(ret), "in method '" "$symname" "', argument " " of type '" "{{ value['name'] }}_t""'");
      }
      if (!argp) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "$symname" "', argument of type '" "{{ value['name'] }}_t""'");
      } else {
        $1 = *(({{ value['name'] }}_t *)(argp));
      }
    }
}

{%- endfor -%} {#- apidef.tPtrFunc #}

{%- for key,value in apidef.tPtrFunc.elements.iterrows() %}
%pointer_functions({{ value['name'] }}_t, {{ value['name'] }}_tp);
{%- endfor -%} {#- apidef.tPtrFunc #}

{%- set tfoss = false -%}
{%- if apidef.tfunc.elements.shape[0] > 0 -%}
   {%- set tpflist =  apidef.tfunc.elements['type'].tolist() -%}
   {%- set tfoss = (('oss' in tpflist) or ('xss' in tpflist))   -%}
{%- endif %}
{%- set pnfoss = false -%}
{%- if apidef.pn.elements.shape[0] > 0 -%}
   {%- set pn =  apidef.pn.elements[apidef.pn.elements['type'].isin(['oss','xss'])] -%}
   {%- set pnfoss = (pn[pn['pactions']=='r'].shape[0] > 0) if pn.shape[0] > 0       -%}
{%- endif %}
{%- if tfoss or pnfoss %}
%typemap(in, numinputs=0) char *_oss_buf() {
  $1 = (char *) malloc(sizeof(char) * (GMS_SSSIZE+1));
}

%typemap(freearg) char *_oss_buf() {
  free((char *) $1);
}
{%- endif %}

%cstring_bounded_output(char *msgBuf_out, GMS_SSSIZE);
{%- set foss = apidef.f.elements[apidef.f.elements['type'].isin(['oss','xss'])] -%}
{%- for arg in foss['arg'].drop_duplicates().tolist() if foss.shape[0] > 0 %}
%cstring_bounded_output(char *{{ arg }}_out, GMS_SSSIZE);
{%- endfor %}

{%- set fpcvc = apidef.f.elements[apidef.f.elements['type'].isin(['pc','vc'])] -%}
{%- for arg in fpcvc['arg'].drop_duplicates().tolist() if fpcvc.shape[0] > 0 %}
%cstring_mutable(char *{{ arg }}_mut, GMS_SSSIZE);
{%- endfor %}

%feature("autodoc", "0");

{#
*$if set SWIGinsert $include %SWIGinsert%

$ontext
loop(tfunc(en,ta)$(sum(f(en,tpp,ea,'osi'),1) and not skipPy(en)),
  put '%inline %{' /
      '  PyObject *Py_' en.tl '({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }}';
  loop(f(en,tpp,ea,taa)$(not sameas('oSI',taa)),
     put ', '
     put CTMod.te(taa);
     put$(not sameas('FuncPtr',taa)) CType.te(taa);
     loop(FuncMap(en,tpp,enn)$sameas('FuncPtr',taa), put enn.tl '_t');
     put  ' ' CCall.te(taa) ea.tl CArraySuf.te(taa);
     put$sameas(taa,'csi')                                            '_in';
     put$(sameas(taa,'vII') or sameas(taa,'vRV') or sameas(taa,'oSI'))'_out';
     put$(sameas(taa,'oss') or sameas(taa,'xss') or sameas(taa,'vInt64')) '_out';
     put$(sameas(taa,'PC')  or sameas(taa,'vC'))                      '_mut';
     if (sameas('xSS', taa), loop(taaa$sameas('int',taaa),
       put ', ' CTMod.te(taaa) CType.te(taaa) ' ' CCall.te(taaa) ea.tl '_i' CArraySuf.te(taaa)));
  );
  put ')' /
      '  {' /
      '    static gdxStrIndexPtrs_t loc_Indx;' /
      '    static gdxStrIndex_t     loc_IndxXXX;' /;
  put '    int loc_i = 0;' /;
  put$(not sameas(en,'void')) '    'CType.te(ta):0 ' ' CCall.te(ta) 'origRet;' /;
  put '    PyObject *list;' /;
$ifThen not set MaxDimStyle
  put '    int loc_dim = GLOBAL_MAX_INDEX_DIM;'/;
$elseIf %MaxDimStyle% == gdx
  put '    int loc_dim = gdxCurrentDim(p{{ apidef.Prefix }});' /;
$elseIf %MaxDimStyle% == gmd
  put '    /* This is a strong assumption... */' /
      '    int loc_dim = arg3;' /;
$EndIf
  put '    list = PyList_New(loc_dim);' /
      '    PyObject *ret = PyList_New(2);' /
      '    GDXSTRINDEXPTRS_INIT(loc_IndxXXX, loc_Indx);' /
      '    ';
  put$(not sameas(en,'void')) 'origRet = ';
  put  en.tl '(p{{ apidef.Prefix }}';
  loop(f(en,tpp,ea,taa),
     put$sameas('oSI',taa) ', loc_Indx';
     put$(not sameas('oSI',taa)) ', ' ea.tl;
     put$sameas(taa,'csi')                                            '_in';
     put$(sameas(taa,'vII') or sameas(taa,'vRV') or sameas(taa,'oSI'))'_out';
     put$(sameas(taa,'oss') or sameas(taa,'xss') or sameas(taa,'vInt64')) '_out';
     put$(sameas(taa,'PC')  or sameas(taa,'vC'))                      '_mut';
     if (sameas('xSS', taa), loop(taaa$sameas('int',taaa),
       put ', ' CTMod.te(taaa) CType.te(taaa) ' ' CCall.te(taaa) ea.tl '_i' CArraySuf.te(taaa)));
  );
  put ');' /
  put$(not sameas(en,'void')) '    if(origRet){' /;
  put '      for(loc_i=0; loc_i<loc_dim; loc_i++){' /
      '        PyList_SetItem(list, loc_i, PyString_FromString(loc_Indx[loc_i]));' /
      '      }' /;
  put$(not sameas(en,'void')) '    }' /;
*lw PyInt_FromLong needs to be changed for other return values
  put '    PyList_SetItem(ret, 0, PyInt_FromLong(origRet));' /
      '    PyList_SetItem(ret, 1, list);' /
      '    return ret;' /
      '  };' /
      '%}' /;
);
$offtext
-#}

extern void *{{ apidef.Prefix }}HandleToPtr ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }});
extern {{ apidef.Prefix }}Handle_t ptrTo{{ apidef.Prefix }}Handle (void *vptr);
extern int {{ apidef.Prefix }}GetReady (char *msgBuf_out, int msgBufSize);
extern int {{ apidef.Prefix }}GetReadyD (const char *dirName, char *msgBuf_out, int msgBufSize);
extern int {{ apidef.Prefix }}GetReadyL (const char *libName, char *msgBuf_out, int msgBufSize);
extern int {{ apidef.Prefix }}Create ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, char *msgBuf_out, int msgBufSize);
extern int {{ apidef.Prefix }}CreateD ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, const char *dirName, char *msgBuf_out, int msgBufSize);
{%- if apidef.UseCD.elements.shape[0] > 0 -%}
  {%- if apidef.UseCD.elements[apidef.UseCD.elements['prefix']==apidef.Prefix].shape[0] > 0 %}
extern int {{ apidef.Prefix }}CreateDD ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, const char *dirName, char *msgBuf_out, int msgBufSize);
  {%- endif -%}
{%- endif %}
extern int {{ apidef.Prefix }}CreateL ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, const char *libName, char *msgBuf_out, int msgBufSize);
extern int {{ apidef.Prefix }}Free ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }});
extern int {{ apidef.Prefix }}LibraryLoaded(void);
extern int {{ apidef.Prefix }}LibraryUnload(void);
extern int {{ apidef.Prefix }}GetScreenIndicator(void);
extern void {{ apidef.Prefix }}SetScreenIndicator(int scrind);
extern int {{ apidef.Prefix }}GetExceptionIndicator(void);
extern void {{ apidef.Prefix }}SetExceptionIndicator(int excind);
extern int {{ apidef.Prefix }}GetExitIndicator(void);
extern void {{ apidef.Prefix }}SetExitIndicator(int extind);
extern {{ apidef.Prefix }}ErrorCallback_t {{ apidef.Prefix }}GetErrorCallback(void);
extern void {{ apidef.Prefix }}SetErrorCallback({{ apidef.Prefix }}ErrorCallback_t func);
extern int {{ apidef.Prefix }}GetAPIErrorCount(void);
extern void {{ apidef.Prefix }}SetAPIErrorCount(int ecnt);
extern void {{ apidef.Prefix }}ErrorHandling(const char *msg);

{% for key,value in apidef.tfunc.elements.iterrows() -%}
{#- *$(not sum(f(en,tpp,ea,'osi'),1)), -#}
  {%- if apidef.skipPy.elements.shape[0] == 0 or 
         value['name'] not in apidef.skipPy.elements['name'].tolist() %}
extern
    {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 -%}
       {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == '0'] -%}
       {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() %} {{ CTMod(value['type']) }}{{ fmvalue['name'] }}_t
       {%- endfor -%} {#- apidef.FuncMap -#}
    {%- else                                                                    %} {{ CType(value['type']) }} {{ CCall(value['type']) }}
    {%- endif %} {{ value['name'] }} ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }}
    {%- set counter = namespace(pos = 1)                                         -%}
    {%- set tpp = datadef.tpp.elements['tp']                                     -%}
    {%- set fnames = apidef.f.elements[apidef.f.elements['name']==value['name']] -%}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() -%}
        {%- if counter.pos > 0 -%} , {% endif -%}
{{ CTMod(fvalue['type']) }}
        {%- if fvalue['type'] != 'funcptr' -%}
{{ CType(fvalue['type']) }}
        {%- else                           -%}
          {%-if apidef.FuncMap.elements.shape[0] > 0 -%}
            {#%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'].isin(tpp)] -%#}
            {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos']==fvalue['pos']] -%}
            {%- for fmkey,fmvalue in funcmap[funcmap['def']==fvalue['name']].iterrows() -%}
{{ fmvalue['name'] }}_t
            {%- endfor -%} {#- apidef.FuncMap -#}
          {%- endif -%}
        {%- endif %} {{ CCall(fvalue['type']) }}
        {%- if fvalue['type'] in ['od','oint']   -%} OUTPUT
        {%- elif fvalue['type'] in ['vd','vint'] -%} INOUT
        {%- else                                 -%} {{ fvalue['arg'] }}
        {%- endif -%}
        {%- if fvalue['type'] == 'csi'                             -%} _in
        {%- elif fvalue['type'] in ['vii','vrv','osi']             -%} _out
        {%- elif fvalue['type'] in ['oss','xss','oint64','vint64'] -%} _out
        {%- elif fvalue['type'] in ['pc','vc']                     -%} _mut
        {%- endif -%}
{{ CArraySuf(fvalue['type']) }}
        {%- if fvalue['type'] == 'xss' -%}
, {{ CTMod('int') }}{{ CType('int') }} {{ CCall('int') }}{{ fvalue['arg'] }}_i{{ CArraySuf('int') }}
        {%- endif -%}
        {%- set counter.pos = counter.pos + 1 -%}
    {%- endfor -%} {#- apidef.f -#}
    {%- if value['type'] in ['oss','xss'] -%}, char *_oss_buf
    {%- endif -%}
);
  {%- endif -%}
{% endfor -%} {#- apidef.tptrfunc #}

{%- set skipPy = [] -%}
{%- if ((apidef.skipPy is defined) and (apidef.skipPy.elements.shape[0] > 0)) -%}
    {%- set skipPy = apidef.skipPy.elements['name'].tolist() -%}
{%- endif %}
{%- for key,value in apidef.pn.elements.iterrows() if value['name'] not in skipPy %}
extern
    {%- if value['pactions'] == 'r' -%}
        {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 -%}
           {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == '0'] -%}
           {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() %} {{ fmvalue['name'] }}_t
           {%- endfor -%} {#- apidef.FuncMap -#}
        {%- else                                                                        %} {{ CType(value['type']) }} {{ CCall(value['type']) }}
        {%- endif %} {{ value['name'] }} ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }}
        {%- if value['type'] in ['oss','xss'] -%}, char *_oss_buf
        {%- endif -%} );
    {%- else                        %} void {{ value['name'] }}Set ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }},
        {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 -%}
            {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == 0] -%}
            {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() -%} {{ fmvalue['name'] }}_t
            {%- endfor -%} {#- apidef.FuncMap -#}
        {%- else                                                                        %} const {{ CType(value['type']) }}
        {%- endif %} {{ CCall(value['type']) }}x);
  {%- endif -%}
{% endfor -%} {#- apidef.pn #}

%include "gclgms.h"

{% endblock -%}
