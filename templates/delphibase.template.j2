{%- block header -%}{%- endblock -%}
{
 GAMS - Loading mechanism for GAMS Expert-Level APIs

 Copyright (c) 2016-{{ api.SysYear }} GAMS Software GmbH <support@gams.com>
 Copyright (c) 2016-{{ api.SysYear }} GAMS Development Corp. <support@gams.com>

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
}

{% macro prettyWhiteSpace(len) -%}
{%- for n in range(len) %} {% endfor -%}
{%- endmacro -%}

{%- macro DCall(type) -%}
{{ datadef.DelphiCall.elements[datadef.DelphiCall.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DCallB(type) -%}
{{ datadef.DelphiCallB.elements.loc[datadef.DelphiCallB.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DCallC(type) -%}
{{ datadef.DelphiCallC.elements.loc[datadef.DelphiCallC.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DPureCall(type) -%}
{{ datadef.DelphiPureCall.elements[datadef.DelphiPureCall.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DType(type) -%}
{{ datadef.DelphiType.elements[datadef.DelphiType.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DTypeB(type) -%}
{{ datadef.DelphiTypeB.elements[datadef.DelphiTypeB.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DTypeC(type) -%}
{{ datadef.DelphiTypeC.elements[datadef.DelphiTypeC.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DDefVal(type) -%}
{{ datadef.DelphiDefVal.elements[datadef.DelphiDefVal.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DGDX(type) -%}
{{ datadef.DelphiGDX.elements.loc[datadef.DelphiGDX.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro DPtr(type) -%}
{{ datadef.DelphiPtr.elements.loc[datadef.DelphiPtr.elements['ta']==type]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro taind(type) -%}
{{ datadef.taind.elements[datadef.taind.elements['type']==type]['value'].iloc[0] }}
{%- endmacro -%}

{%- macro pactions(action) -%}
{{ datadef.pactions.elements[datadef.pactions.elements['name']==action]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro prefix(pre) -%}
{{ apidef.pre.elements[apidef.pre.elements['prefix']==pre]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro prexfix(pre) -%}
{{ apidef.prex.elements[apidef.prex.elements['prefix']==pre]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro dunit(pre) -%}
{{ apidef.DUnit.elements[apidef.DUnit.elements['prefix']==pre]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro dobject(pre) -%}
{{ apidef.DObject.elements[apidef.DObject.elements['prefix']==pre]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro dobjectint(pre) -%}
{{ apidef.DObjectInt.elements[apidef.DObjectInt.elements['prefix']==pre]['text'].iloc[0] }}
{%- endmacro -%}

{%- macro maxint(varlist) -%}
{%- set max = namespace(value=-1) -%}
{%- for v in varlist -%}
  {%- if v > max.value -%}
     {%- set max.value = v -%}
  {%- endif -%}
{%- endfor-%}
{{ max.value }}
{%- endmacro -%}

{%- macro functionsDescription(description) -%}
   {%- if description|length > 0 -%}
      {%- set descr = description.split('\n') -%}
      {%- for d in descr if d is defined and d | length > 0  %}
// {{ d }}
      {%- endfor %}
   {%- endif -%}
{%- endmacro -%}

{%- macro writeconst() -%}
{% for ckey,cvalue in apidef.cname.elements.iterrows() %}
   {%- set counter = namespace(value=0) -%}
   {% for key,value in apidef.gcon.elements[apidef.gcon.elements['group']==cvalue['group']].iterrows() %}
      {%- set len = cvalue['maxlen'] - value['len'] %}
      {%- if counter.value == 0 %}
const {{ value['constant'] }}{{ prettyWhiteSpace(len) }} = {{ value['value'] }};  { {{ value['group'] }} }
         {%- set counter.value = counter.value + 1 %}
      {%- else %}
      {{ value['constant'] }}{{ prettyWhiteSpace(len) }} = {{ value['value'] }};
      {%- endif %}
   {%- endfor %}
{% endfor %}
{%- for ckey,cvalue in apidef.csname.elements.iterrows() %}
   {%- set counter = namespace(value=0) -%}
   {% for key,value in apidef.gstrcon.elements[apidef.gstrcon.elements['group']==cvalue['group']].iterrows() -%}
      {%- set len = cvalue['maxlen'] - value['len'] %}
      {%- if counter.value == 0 -%}
const {{ value['constant'] }}{{ prettyWhiteSpace(len) }} = '{{ value['value'] }}';  { {{ value['group'] }} }
         {%- set counter.value = counter.value + 1 %}
      {%- else %}
      {{ value['constant'] }}{{ prettyWhiteSpace(len) }} = '{{ value['value'] }}';
      {%- endif %}
   {%- endfor %}
{%- endfor %}
{%- endmacro -%}

{%- block content -%}{%- endblock -%}