{%- extends "cbase.template.j2" -%}

{%- block header -%}
C code {{ api.generatedstr }}
{%- endblock -%}

{%- block content %}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#define {{ apidef.Prefix.upper() }}_MAIN
#include "{{ apidef.CCall }}.h"

#if defined(_WIN32)
# include <windows.h>
  static char winErr[] = "Windows error";
  typedef HINSTANCE soHandle_t;
#else
# include <unistd.h>
# include <dlfcn.h>
# include <sys/utsname.h>
  typedef void *soHandle_t;
#endif

static soHandle_t h;
static int isLoaded = 0;
static int objectCount = 0;
static int ScreenIndicator = 1;
static int ExceptionIndicator = 0;
static int ExitIndicator = 1;
static {{ apidef.Prefix  }}ErrorCallback_t ErrorCallBack = NULL;
static int APIErrorCount = 0;

#if !defined(GC_NO_MUTEX)
{% include 'gcmutex.h' %}
static GC_mutex_t libMutex;
static GC_mutex_t objMutex;
static GC_mutex_t exceptMutex;

static int MutexIsInitialized = 0;

void {{ apidef.Prefix  }}InitMutexes(void)
{
  int rc;
  if (0==MutexIsInitialized) {
    rc = GC_mutex_init (&libMutex);     if(0!=rc) {{ apidef.Prefix  }}ErrorHandling("Problem initializing libMutex");
    rc = GC_mutex_init (&objMutex);     if(0!=rc) {{ apidef.Prefix  }}ErrorHandling("Problem initializing objMutex");
    rc = GC_mutex_init (&exceptMutex);  if(0!=rc) {{ apidef.Prefix  }}ErrorHandling("Problem initializing exceptMutex");
    MutexIsInitialized = 1;
  }
}

void {{ apidef.Prefix  }}FiniMutexes(void)
{
  if (1==MutexIsInitialized) {
    GC_mutex_delete (&libMutex);
    GC_mutex_delete (&objMutex);
    GC_mutex_delete (&exceptMutex);
    MutexIsInitialized = 0;
  }
}
#  define lock(MUTEX)   if(MutexIsInitialized) GC_mutex_lock (&MUTEX);
#  define unlock(MUTEX) if(MutexIsInitialized) GC_mutex_unlock (&MUTEX);
#else
#  define lock(MUTEX)   ;
#  define unlock(MUTEX) ;
void {{ apidef.Prefix  }}InitMutexes(void) {}
void {{ apidef.Prefix  }}FiniMutexes(void) {}
#endif

#if !defined(GAMS_UNUSED)
#define GAMS_UNUSED(x) (void)x;
#endif

typedef void ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.prexfix }}Create_t) ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }});
static {{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.prexfix }}Create);
{% set usecd = false -%}
{%- if apidef.UseCD.elements.shape[0] > 0 -%}
   {%- if apidef.UseCD.elements[apidef.UseCD.elements['prefix']==apidef.Prefix].shape[0] > 0 -%}
      {%- set usecd = true -%}
   {%- endif -%}
{%- endif -%}
{% set clibuse = false -%}
{%- if apidef.CLibUse.elements.shape[0] > 0 -%}
   {%- if apidef.CLibUse.elements[apidef.CLibUse.elements['prefix']==apidef.Prefix].shape[0] > 0 -%}
      {%- set clibuse = true -%}
   {%- endif -%}
{%- endif -%}
{%- set USE_XXXLOADPATH = false -%}
{%- if apidef.ulp.elements.shape[0] > 0 -%}
   {%- if apidef.ulp.elements[apidef.ulp.elements['prefix']==apidef.Prefix].shape[0] > 0 -%}
      {%- set USE_XXXLOADPATH = true -%}
   {%- endif -%}
{%- endif %}

{%- if usecd %}
typedef void ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.prexfix }}CreateD_t) ({{ apidef.Prefix  }}Handle_t *p{{ apidef.Prefix  }}, const char *dirName);
static {{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.prexfix  }}CreateD);
{% endif -%}
typedef void ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.prexfix }}Free_t)   ({{ apidef.Prefix  }}Handle_t *p{{ apidef.Prefix  }});
static {{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.prexfix }}Free);
typedef int ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.prexfix }}APIVersion_t) (int api, char *msg, int *cl);
static {{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.prexfix }}APIVersion);
typedef int ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.prexfix }}Check_t) (const char *ep, int nargs, int s[], char *msg);
static {{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.prexfix }}Check);

{%- if USE_XXXLOADPATH %}
typedef void ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.Prefix }}SetLoadPath_t) (const char *s);
{{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.Prefix }}SetLoadPath);
typedef void ({{ apidef.Prefix.upper() }}_CALLCONV *{{ apidef.Prefix }}GetLoadPath_t) (char *s);
{{ apidef.Prefix.upper() }}_FUNCPTR({{ apidef.Prefix }}GetLoadPath);
{% endif -%}

{# Write default functions #}
#define printNoReturn(f,nargs) { \
  char d_msgBuf[256]; \
  strcpy(d_msgBuf,#f " could not be loaded: "); \
  {{ apidef.prexfix }}Check(#f,nargs,d_s,d_msgBuf+strlen(d_msgBuf)); \
  {{ apidef.Prefix }}ErrorHandling(d_msgBuf); \
}
#define printAndReturn(f,nargs,rtype) { \
  char d_msgBuf[256]; \
  strcpy(d_msgBuf,#f " could not be loaded: "); \
  {{ apidef.prexfix }}Check(#f,nargs,d_s,d_msgBuf+strlen(d_msgBuf)); \
  {{ apidef.Prefix }}ErrorHandling(d_msgBuf); \
  return (rtype) 0; \
}

{% set tpp = datadef.tpp.elements['tp'].tolist() -%}

{% for key,value in apidef.tfunc.elements.iterrows() -%}
    {%- set fnames = apidef.f.elements[apidef.f.elements['name']==value['name']] -%}
    {%- if value['text'] %}
/*    {%- set description = value['text'].split('\n') -%}
      {%- set counter = namespace(value=0) -%}
      {%- for d in description if d is defined and d | length > 0  -%}
        {%- if counter.value == 0 %}* {{ d }}
        {%- else %}
 * {{ d }}
        {%- endif %}
        {%- set counter.value = counter.value + 1 -%}
      {%- endfor %}
 * @param p{{ apidef.Prefix }} {{ apidef.Prefix }} object handle
      {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() %}
 * @param {{ fvalue['arg']}} {{ fvalue['text'] }}
      {%- endfor -%}
      {%- set returnvalue = fnames[fnames['pos']==0] -%}
      {%- if returnvalue.shape[0] > 0 %}
        {%- set return = returnvalue['text'].iloc[0].split('\n') -%}
      {%- set counter = namespace(value=0) -%}
      {%- for r in return if r is defined and r | length > 0 -%}
        {%- if counter.value == 0 and r %}
 * @return {{ r }}
        {%- else %}
 *         {{ r }}
        {%- endif %}
        {%- set counter.value = counter.value + 1 -%}
      {%- endfor -%}
      {%- endif %}
 */
    {%- endif -%}
    {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 %}
       {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == '0'] -%}
       {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() %}
{{ CTMod(value['type']) }}{{ fmvalue['name'] }}_t
       {%- endfor -%} {#- apidef.FuncMap -#}
    {%- else                                                                   %}
{{ CType(value['type']) }} {{ CCall(value['type']) }}
    {%- endif %} {{ apidef.Prefix.upper() }}_CALLCONV d_{{ value['name'] }} ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() -%}
, {{ CTMod(fvalue['type']) }}
        {%- if fvalue['type'] != 'funcptr' -%}
{{ CType(fvalue['type']) }}
        {%- elif apidef.FuncMap.elements.shape[0] > 0                 -%}
            {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == fvalue['pos']] -%}
            {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() -%}
{{ fmvalue['name'] }}_t
            {%- endfor -%} {#- apidef.FuncMap -#}
        {%- endif %} {{ CCall(fvalue['type']) }}{{ fvalue['arg'] }}{{ CArraySuf(fvalue['type']) }}
        {%- if fvalue['type'] == 'xss' -%}
, {{ CTMod('int') }}{{ CType('int') }} {{ CCall('int') }}{{ fvalue['arg'] }}_i{{ CArraySuf('int') }}
        {%- endif -%}
    {% endfor -%} {#- apidef.f -#}
    {%- if value['type'] == 'oss' -%}, char *buf {%- endif -%}
)
{
  int d_s[]={ {#--#}
{{ taind(value['type']) }}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() -%}
,{{ taind(fvalue['type']) }}
    {%- endfor -%} {#- apidef.f -#}
};
  GAMS_UNUSED(p{{ apidef.Prefix }})
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() %}
  GAMS_UNUSED({{ fvalue['arg'] }})
       {%- if fvalue['type'] == 'xss' %}
  GAMS_UNUSED({{ fvalue['arg'] }}_i)
       {%- endif -%}
    {% endfor -%} {#- apidef.f -#}
    {%- if value['type'] == 'oss' %}
  GAMS_UNUSED(buf)
    {%- endif -%}
    {%- set farg = 0 -%}
    {%- if apidef.farg.elements.shape[0] > 0 -%}
        {%- if apidef.farg.elements[apidef.farg.elements['name']==value['name']].shape[0] > 0 -%}
            {%- set farg = apidef.farg.elements.loc[apidef.farg.elements['name']==value['name']]['value'].iloc[0] -%}
        {%- endif -%}
    {%- endif -%}
    {%- if value['type'] != 'void'  %}
        {%- if value['type'] != 'funcptr' %}
  printAndReturn({{ value['name'] }},{{ farg }},{{ CType(value['type']) }} {{ CCall(value['type']) }})
        {%- else                          %}
           {%- if apidef.FuncMap.elements.shape[0] > 0 -%}
               {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos']=='0'] -%}
               {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() %}
  printAndReturn({{ fmvalue['def'] }},{{ farg }},{{ fmvalue['name'] }}_t)
               {%- endfor -%} {#- apidef.FuncMap -#}
            {%- endif -%}
        {%- endif -%}
    {%- else                        %}
  printNoReturn({{ value['name'] }},{{ farg }})
    {%- endif %}
}
{% endfor -%} {#- apidef.tFunc #}

{%- for key,value in apidef.pn.elements.iterrows() -%}
    {%- if value['text'] %}
/*    {%- set description = value['text'].split('\n') -%}
      {%- set counter = namespace(value=0) -%}
      {%- for d in description if d is defined and d | length > 0  -%}
        {%- if counter.value == 0 %}* {{ d }}
        {%- else %}
 * {{ d }}
        {%- endif %}
        {%- set counter.value = counter.value + 1 -%}
      {%- endfor %}
 * @param p{{ apidef.Prefix }} {{ apidef.Prefix }} object handle
      {%- if value['return'] %}
        {%- set return = value['return'].split('\n') -%}
      {%- set counter = namespace(value=0) -%}
      {%- for r in return if r is defined and r | length > 0 -%}
        {%- if counter.value == 0 and r %}
 * @return {{ r }}
        {%- else %}
 *         {{ r }}
        {%- endif %}
        {%- set counter.value = counter.value + 1 -%}
      {%- endfor -%}
      {%- endif %}
 */
    {%- endif %}
    {%- if value['pactions'] == 'r' -%}
        {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 %}
           {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == 'p'] -%}
           {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() -%}
{{ fmvalue['name'] }}_t
           {%- endfor -%} {#- apidef.FuncMap -#}
        {%- elif value['type'] != 'funcptr'                                        %}
{{ CType(value['type']) }} {{ CCall(value['type']) }}
        {%- endif %} {{ apidef.Prefix.upper() }}_CALLCONV d_{{ value['name'] }} ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }}
        {%- if value['type'] == 'oss' -%}, char *buf {%- endif -%}
)
{
  int d_s[]={ {#--#}
{{ taind(value['type']) }} {#--#} };
  GAMS_UNUSED(p{{ apidef.Prefix }})
        {%- if value['type'] == 'oss' %}
  GAMS_UNUSED(buf)
        {%- endif -%}
        {%- if value['type'] != 'funcptr'  %}
  printAndReturn({{ value['name'] }},0,{{ CType(value['type']) }} {{ CCall(value['type']) }})
        {%- endif %}
        {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 -%}
           {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == 'p'] -%}
           {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() -%}
  printAndReturn({{ fmvalue['def'] }},0,{{ fmvalue['name'] }}_t)
           {%- endfor -%} {#- apidef.FuncMap #}
        {%- endif %}
}
    {%- else                        %}
void {{ apidef.Prefix.upper() }}_CALLCONV d_{{ value['name'] }}Set ({{ apidef.Prefix }}Handle_t p{{ apidef.Prefix }},
        {%- if value['type'] == 'funcptr' and apidef.FuncMap.elements.shape[0] > 0 -%}
           {%- set funcmap = apidef.FuncMap.elements[apidef.FuncMap.elements['fpos'] == 'p'] -%}
           {%- for fmkey,fmvalue in funcmap[funcmap['def']==value['name']].iterrows() -%}
{{ fmvalue['name'] }}_t
           {%- endfor -%} {#- apidef.FuncMap #}
        {%- elif value['type'] != 'funcptr'                                        -%}
const {{ CType(value['type']) }}
        {%- endif %} {{ CCall(value['type']) }}x)
{
  int d_s[]={ {#--#}
{{ taind('void') }},       {#--#}
{{ taind(value['type']) }} {#--#} };
  GAMS_UNUSED(p{{ apidef.Prefix }})
  GAMS_UNUSED(x)
  printNoReturn({{ value['name'] }}Set,1)
}
    {%- endif %}
{% endfor -%} {#- apidef.pn #}

/** return dirName on success, NULL on failure */
static char *
extractFileDirFileName (const char *fileName, char *dirName, char *fName)
{
  int fileNameLen, shave=0;
  const char *end, *s;
  char *t;

  if (NULL == fileName || NULL == dirName || fName == NULL) {
    return NULL;
  }
  fileNameLen = (int) strlen(fileName);

#if defined(_WIN32)
  /* get the last delimiter */
  for (end = fileName + fileNameLen - 1;
       end >= fileName && '\\' != *end && ':' != *end;  end--);
  /* shave off the trailing delimiter if:
   *  it isn't the first char,
   *  it is a backslash, and
   *  it is not preceded by a delimiter
   */
  if (end > fileName && '\\' == *end
   && (! ('\\' == *(end-1) || ':' == *(end-1)))
     ) {
    end--; shave=1;
  }
#else
  /* non-Windows: implicitly, this is the Unix version */
  /* get the last delimiter */
  for (end = fileName + fileNameLen - 1;
       end >= fileName && '/' != *end;  end--);

  if (end > fileName && '/' == *end) {
    end--; shave=1;
  }
#endif  /* if defined(_WIN32) */

  for (s = fileName, t = dirName;  s <= end;  s++, t++)
    *t = *s;
  *t = '\0';

  if (shave) s++;
  for (t = fName;  s <= fileName + fileNameLen - 1;  s++, t++)
    *t = *s;
  *t = '\0';

  return dirName;
} /* extractFileDirFileName */

static soHandle_t
loadLib (const char *libName, char **errMsg)
{
  soHandle_t h;

#if defined(_WIN32)
#if defined(UNICODE) || defined (_UNICODE)
  h = LoadLibraryA(libName);
#else
  h = LoadLibrary(libName);
#endif
  if (NULL == h) {
    *errMsg = winErr;
  }
  else {
    *errMsg = NULL;
  }
#else
  (void) dlerror();
  h = dlopen (libName, RTLD_NOW);
  if (NULL == h) {
    *errMsg = dlerror();
  }
  else {
    *errMsg = NULL;
  }
#endif

  return h;
} /* loadLib */

static int
unLoadLib (soHandle_t hh)
{
  int rc;

#if defined(_WIN32)
  rc = FreeLibrary (hh);
  return ! rc;
#else
  rc = dlclose (hh);
#endif
  return rc;
} /* unLoadLib */

static void *
loadSym (soHandle_t h, const char *sym, char **errMsg)
{
  void *s;
  const char *from;
  char *to;
  const char *tripSym;
  char lcbuf[257];
  char ucbuf[257];
  size_t symLen;
  int trip;

  /* search in this order:
   *  1. lower
   *  2. original
   *  3. upper
   */

  symLen = 0;
  for (trip = 1;  trip <= 3;  trip++) {
    switch (trip) {
    case 1:                             /* lower */
      for (from = sym, to = lcbuf;  *from;  from++, to++) {
        *to = tolower(*from);
      }
      symLen = from - sym;
      lcbuf[symLen] = '\0';
      tripSym = lcbuf;
      break;
    case 2:                             /* original */
      tripSym = sym;
      break;
    case 3:                             /* upper */
      for (from = sym, to = ucbuf;  *from;  from++, to++) {
        *to = toupper(*from);
      }
      ucbuf[symLen] = '\0';
      tripSym = ucbuf;
      break;
    default:
      tripSym = sym;
    } /* end switch */
#if defined(_WIN32)
#  if defined(HAVE_INTPTR_T)
    s = (void *)(intptr_t)GetProcAddress (h, tripSym);
#  else
    s = (void *)GetProcAddress (h, tripSym);
#  endif
    *errMsg = NULL;
    if (NULL != s) {
      return s;
    }
#else
    (void) dlerror();
    s = dlsym (h, tripSym);
    *errMsg = dlerror();
    if (NULL == *errMsg) {
      return s;
    }
#endif
  } /* end loop over symbol name variations */

  return NULL;
} /* loadSym */

/* TNAME = type name, ENAME = exported name */
#if defined(HAVE_INTPTR_T)
#  define LOADIT(TNAME,ENAME) symName = ENAME; TNAME = (TNAME##_t) (intptr_t) loadSym (h, symName, &errMsg); if (NULL == TNAME) goto symMissing
#  define LOADIT_ERR_OK(TNAME,ENAME) symName = ENAME; TNAME = (TNAME##_t) (intptr_t) loadSym (h, symName, &errMsg)
#else
#  define LOADIT(TNAME,ENAME) symName = ENAME; TNAME = (TNAME##_t) loadSym (h, symName, &errMsg); if (NULL == TNAME) goto symMissing
#  define LOADIT_ERR_OK(TNAME,ENAME) symName = ENAME; TNAME = (TNAME##_t) loadSym (h, symName, &errMsg)
#endif
{#-
*put$sum(f(en,tpp,ea,'osi'),1) '#define PYLOADIT(TNAME,ENAME) symName = ENAME; PYNAME(TNAME) = (TNAME##_t) loadSym (h, symName, &errMsg); if (NULL == PYNAME(TNAME)) goto symMissing' /;
 #}

#if ! defined(GMS_DLL_BASENAME)
{%- if clibuse %}
# define GMS_DLL_BASENAME "{{ apidef.CLib }}"
{%- else       %}
# define GMS_DLL_BASENAME "{{ apidef.DelphiLib }}"
{%- endif %}
#endif
#if defined(_WIN32)
# if ! defined(GMS_DLL_PREFIX)
#  define GMS_DLL_PREFIX ""
# endif
# if ! defined(GMS_DLL_EXTENSION)
#  define GMS_DLL_EXTENSION ".dll"
# endif
# if ! defined(GMS_DLL_SUFFIX)
#  if defined(_WIN64)
#   define GMS_DLL_SUFFIX "64"
#  else
#   define GMS_DLL_SUFFIX ""
#  endif
# endif

#else  /* start non-Windows */

# if ! defined(GMS_DLL_PREFIX)
#  define GMS_DLL_PREFIX "lib"
# endif
# if ! defined(GMS_DLL_EXTENSION)
#  if defined(__APPLE__)
#   define GMS_DLL_EXTENSION ".dylib"
#  else
#   define GMS_DLL_EXTENSION ".so"
#  endif
# endif
# if ! defined(GMS_DLL_SUFFIX)
#  if defined(__WORDSIZE)
#   if 64 == __WORDSIZE
#    define GMS_DLL_SUFFIX "64"
#   else
#    define GMS_DLL_SUFFIX ""
#   endif
#  elif defined(__SIZEOF_POINTER__)
#   if 4 == __SIZEOF_POINTER__
#    define GMS_DLL_SUFFIX ""
#   elif 8 == __SIZEOF_POINTER__
#    define GMS_DLL_SUFFIX "64"
#   endif
#  endif
# endif /* ! defined(GMS_DLL_SUFFIX) */
#endif

/** XLibraryLoad: return 0 on success, ~0 on failure */
static int
XLibraryLoad (const char *dllName, char *errBuf, int errBufSize)
{
  char *errMsg;
  const char *symName;
  int rc, cl;

  if (isLoaded)
    return 0;
  h = loadLib (dllName, &errMsg);
  if (NULL == h) {
    if (NULL != errBuf) {
      int elen;
      char* ebuf;
      elen = errBufSize-1;  ebuf = errBuf;
      rc = sprintf (ebuf, "%.*s", elen, "Could not load shared library ");
      elen -= rc;  ebuf+= rc;
      rc = sprintf (ebuf, "%.*s", elen, dllName);
      elen -= rc;  ebuf+= rc;
      rc = sprintf (ebuf, "%.*s", elen, ": ");
      elen -= rc;  ebuf+= rc;
      rc = sprintf (ebuf, "%.*s", elen, errMsg);
      /* elen -= rc;  ebuf+= rc; */
      errBuf[errBufSize-1] = '\0';
    }
    return 1;
  }
  else {
     /* printf ("Loaded shared library %s successfully\n", dllName); */
    if (errBuf && errBufSize)
      errBuf[0] = '\0';
  }

  LOADIT({{ apidef.prexfix }}Create, "{{ apidef.prexfix }}Create");
{%- if usecd -%}
   {%- if not clibuse %}
  LOADIT({{ apidef.prexfix }}CreateD, "C{{ apidef.prexfix }}CreateD");
   {%- else           %}
  LOADIT({{ apidef.prexfix }}CreateD, "{{ apidef.prexfix }}CreateD");
   {% endif %}
{% endif %}
  LOADIT({{ apidef.prexfix }}Free, "{{ apidef.prexfix }}Free");
{%- if clibuse %}
  LOADIT({{ apidef.prexfix }}Check, "C__{{ apidef.prexfix }}Check");
  LOADIT({{ apidef.prexfix }}APIVersion, "C__{{ apidef.prexfix }}APIVersion");
{%- else       %}
  LOADIT({{ apidef.prexfix }}Check, "C{{ apidef.prexfix }}Check");
  LOADIT({{ apidef.prexfix }}APIVersion, "C{{ apidef.prexfix }}APIVersion");
{%- endif %}

  if (!{{ apidef.prexfix }}APIVersion({{ apidef.APIVersion  }},errBuf,&cl))
    return 1;

{%- if USE_XXXLOADPATH %}
   {%- if clibuse %}

  LOADIT_ERR_OK({{ apidef.Prefix }}SetLoadPath, "C__{{ apidef.Prefix }}SetLoadPath");
  LOADIT_ERR_OK({{ apidef.Prefix }}GetLoadPath, "C__{{ apidef.Prefix }}GetLoadPath");
   {%- else       %}

  LOADIT_ERR_OK({{ apidef.Prefix }}SetLoadPath, "C{{ apidef.Prefix }}SetLoadPath");
  LOADIT_ERR_OK({{ apidef.Prefix }}GetLoadPath, "C{{ apidef.Prefix }}GetLoadPath");
   {%- endif %}
{%- endif %}

#define CheckAndLoad(f,nargs,prefix) \
  if (!{{ apidef.prexfix }}Check(#f,nargs,s,errBuf)) \
    f = &d_##f; \
  else { \
    LOADIT(f,prefix #f); \
  }

{#-
*put$sum(f(en,tpp,ea,'osi'),1) '#define PYCheckAndLoad(f,nargs,prefix) \' /
*                              '  if (!{{ apidef.prexfix }}Check(#f,nargs,s,errBuf)) \' /
*                              '    PYNAME(f) = &d_##f; \' /
*                              '  else { \' /
*                              '    PYLOADIT(f,prefix #f); \' /
*                              '  }' /;
 #}

{%- for key,value in apidef.tfunc.elements.iterrows() %}
  {int s[]={ {#--#}
{{ taind(value['type']) }}
    {%- set fnames = apidef.f.elements[apidef.f.elements['name']==value['name']] -%}
    {%- for fkey,fvalue in fnames[fnames['pos'].isin(tpp)].iterrows() -%}
,{{ taind(fvalue['type']) }}
    {%- endfor -%} {#- apidef.f -#}
};
{#- *  if(sum(f(en,tpp,ea,'osi'),1), put 'PY' ); -#}
{%- set enstring = apidef.enstring.elements['name'].tolist() -%}
{%- set farg = 0 %}
{%- if apidef.farg.elements.shape[0] > 0 %}
    {%- if apidef.farg.elements[apidef.farg.elements['name']==value['name']].shape[0] > 0 %}
        {%- set farg = apidef.farg.elements.loc[apidef.farg.elements['name']==value['name']]['value'].iloc[0] %}
    {%- endif %}
{%- endif %} CheckAndLoad({{ value['name'] }},{{ farg }},"
{%- if clibuse                     -%} C__
{%- elif value['name'] in enstring -%} C
{%- endif -%}
"); }
{%- endfor -%} {#- apidef.tFunc #}

{#- write properties -#}
{%- for key,value in apidef.pn.elements.iterrows() -%}
    {%- if value['pactions'] == 'r' %}
  {int s[]={ {#--#}
{{ taind(value['type']) }} {#- -#} }; CheckAndLoad({{ value['name'] }},0,"
{%- if clibuse                  -%} C__
{%- elif value['type'] == 'oss' -%} C
{%- endif -%}
"); }
    {%- else                        %}
  {int s[]={ {#--#}
{{ taind('void') }}, {#--#}
{{ taind(value['type']) }} {#- -#} }; CheckAndLoad({{ value['name'] }}Set,1,"
{%- if clibuse                  -%} C__
{%- elif value['type'] == 'oss' -%} C
{%- endif -%}
"); }
    {%- endif %}
{%- endfor -%} {#- apidef.pn #}

 return 0;

 symMissing:
  if (errBuf && errBufSize>0) {
    int elen;
    char* ebuf;
    elen = errBufSize;  ebuf = errBuf;
    rc = sprintf (ebuf, "%.*s", elen, "Could not load symbol '");
    elen -= rc;  ebuf+= rc;
    rc = sprintf (ebuf, "%.*s", elen, symName);
    elen -= rc;  ebuf+= rc;
    rc = sprintf (ebuf, "%.*s", elen, "': ");
    elen -= rc;  ebuf+= rc;
    rc = sprintf (ebuf, "%.*s", elen, errMsg);
    /* elen -= rc;  ebuf+= rc; */
    errBuf[errBufSize-1] = '\0';
    /* printf ("%s\n", errBuf); */
    return 2;
  }

 return 0;

} /* XLibraryLoad */

static int
libloader(const char *dllPath, const char *dllName, char *msgBuf, int msgBufSize)
{

  char dllNameBuf[512];
  int myrc = 0;

#if ! defined(GMS_DLL_PREFIX)
# error "GMS_DLL_PREFIX expected but not defined"
#endif
#if ! defined(GMS_DLL_BASENAME)
# error "GMS_DLL_BASENAME expected but not defined"
#endif
#if ! defined(GMS_DLL_EXTENSION)
# error "GMS_DLL_EXTENSION expected but not defined"
#endif
#if ! defined(GMS_DLL_SUFFIX)
# error "GMS_DLL_SUFFIX expected but not defined"
#endif

  if (NULL != msgBuf) msgBuf[0] = '\0';

  if (! isLoaded) {
    if (NULL != dllPath && '\0' != *dllPath) {
      strncpy(dllNameBuf, dllPath, sizeof(dllNameBuf)-1);
      dllNameBuf[sizeof(dllNameBuf)-1] = '\0';
#if defined(_WIN32)
      if ('\\' != dllNameBuf[strlen(dllNameBuf)])
        strcat(dllNameBuf,"\\");
#else
      if ('/' != dllNameBuf[strlen(dllNameBuf)])
        strcat(dllNameBuf,"/");
#endif
    }
    else {
      dllNameBuf[0] = '\0';
    }
    if (NULL != dllName && '\0' != *dllName) {
      strncat(dllNameBuf, dllName, sizeof(dllNameBuf)-strlen(dllNameBuf)-1);
    }
    else {
      strncat(dllNameBuf, GMS_DLL_PREFIX GMS_DLL_BASENAME, sizeof(dllNameBuf)-strlen(dllNameBuf)-1);
      strncat(dllNameBuf, GMS_DLL_SUFFIX                 , sizeof(dllNameBuf)-strlen(dllNameBuf)-1);
      strncat(dllNameBuf, GMS_DLL_EXTENSION              , sizeof(dllNameBuf)-strlen(dllNameBuf)-1);
    }
    isLoaded = ! XLibraryLoad (dllNameBuf, msgBuf, msgBufSize);
    if (isLoaded) {
{%- if USE_XXXLOADPATH %}
       if (NULL != {{ apidef.Prefix }}SetLoadPath && NULL != dllPath && '\0' != *dllPath) {
         {{ apidef.Prefix }}SetLoadPath(dllPath);
       }
       else {                            /* no setLoadPath call found */
         myrc |= 2;
       }
{%- endif %}
    }
    else {                              /* library load failed */
      myrc |= 1;
    }
  }
  return (myrc & 1) == 0;
}

int {{ apidef.Prefix }}GetReady (char *msgBuf, int msgBufSize)
{
  int rc;
  lock(libMutex);
  rc = libloader(NULL, NULL, msgBuf, msgBufSize);
  unlock(libMutex);
  return rc;
} /* {{ apidef.Prefix }}GetReady */

int {{ apidef.Prefix }}GetReadyD (const char *dirName, char *msgBuf, int msgBufSize)
{
  int rc;
  lock(libMutex);
  rc = libloader(dirName, NULL, msgBuf, msgBufSize);
  unlock(libMutex);
  return rc;
} /* {{ apidef.Prefix }}GetReadyD */

int {{ apidef.Prefix }}GetReadyL (const char *libName, char *msgBuf, int msgBufSize)
{
  char dirName[1024],fName[1024];
  int rc;
  extractFileDirFileName (libName, dirName, fName);
  lock(libMutex);
  rc = libloader(dirName, fName, msgBuf, msgBufSize);
  unlock(libMutex);
  return rc;
} /* {{ apidef.Prefix }}GetReadyL */

int {{ apidef.Prefix }}Create ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, char *msgBuf, int msgBufSize)
{
  int {{ apidef.Prefix }}IsReady;

  {{ apidef.Prefix }}IsReady = {{ apidef.Prefix }}GetReady (msgBuf, msgBufSize);
  if (! {{ apidef.Prefix }}IsReady) {
    return 0;
  }
  assert({{ apidef.prexfix }}Create);
  {{ apidef.prexfix }}Create(p{{ apidef.Prefix }});
  if(p{{ apidef.Prefix }} == NULL)
  { strcpy(msgBuf,"Error while creating object"); return 0; }
  lock(objMutex);
  objectCount++;
  unlock(objMutex);
  return 1;                     /* return true on successful library load */
} /* {{ apidef.Prefix }}Create */

int {{ apidef.Prefix }}CreateD ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, const char *dirName,
                char *msgBuf, int msgBufSize)
{
  int {{ apidef.Prefix }}IsReady;

  {{ apidef.Prefix }}IsReady = {{ apidef.Prefix }}GetReadyD (dirName, msgBuf, msgBufSize);
  if (! {{ apidef.Prefix }}IsReady) {
    return 0;
  }
  assert({{ apidef.prexfix }}Create);
  {{ apidef.prexfix }}Create(p{{ apidef.Prefix }});
  if(p{{ apidef.Prefix }} == NULL)
  { strcpy(msgBuf,"Error while creating object"); return 0; }
  lock(objMutex);
  objectCount++;
  unlock(objMutex);
  return 1;                     /* return true on successful library load */
} /* {{ apidef.Prefix }}CreateD */

{%- if usecd %}

int {{ apidef.Prefix }}CreateDD ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, const char *dirName,
                char *msgBuf, int msgBufSize)
{
  int {{ apidef.Prefix }}IsReady;
  {{ apidef.Prefix }}IsReady = {{ apidef.Prefix }}GetReadyD (dirName, msgBuf, msgBufSize);
  if (! {{ apidef.Prefix }}IsReady) {
    return 0;
  }
  assert({{ apidef.prexfix }}CreateD);
  {{ apidef.prexfix }}CreateD(p{{ apidef.Prefix }}, dirName);
  if(p{{ apidef.Prefix }} == NULL)
  { strcpy(msgBuf,"Error while creating object"); return 0; }
  lock(objMutex);
  objectCount++;
  unlock(objMutex);
  return 1;                     /* return true on successful library load */
} /* {{ apidef.Prefix }}CreateD */
{% endif %}

int {{ apidef.Prefix }}CreateL ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }}, const char *libName,
                char *msgBuf, int msgBufSize)
{
  int {{ apidef.Prefix }}IsReady;

  {{ apidef.Prefix }}IsReady = {{ apidef.Prefix }}GetReadyL (libName, msgBuf, msgBufSize);
  if (! {{ apidef.Prefix }}IsReady) {
    return 0;
  }
  assert({{ apidef.prexfix }}Create);
  {{ apidef.prexfix }}Create(p{{ apidef.Prefix }});
  if(p{{ apidef.Prefix }} == NULL)
  { strcpy(msgBuf,"Error while creating object"); return 0; }
  lock(objMutex);
  objectCount++;
  unlock(objMutex);
  return 1;                     /* return true on successful library load */
} /* {{ apidef.Prefix }}CreateL */

int {{ apidef.Prefix }}Free   ({{ apidef.Prefix }}Handle_t *p{{ apidef.Prefix }})
{
  assert({{ apidef.prexfix }}Free);
  {{ apidef.prexfix }}Free(p{{ apidef.Prefix }}); p{{ apidef.Prefix }} = NULL;
  lock(objMutex);
  objectCount--;
  unlock(objMutex);
  return 1;
} /* {{ apidef.Prefix }}Free */

int {{ apidef.Prefix }}LibraryLoaded(void)
{
  int rc;
  lock(libMutex);
  rc = isLoaded;
  unlock(libMutex);
  return rc;
} /* {{ apidef.Prefix }}LibraryLoaded */

int {{ apidef.Prefix }}LibraryUnload(void)
{
  lock(objMutex);
  if (objectCount > 0)
  {
    unlock(objMutex);
    return 0;
  }
  unlock(objMutex);
  lock(libMutex);
  if (isLoaded)
  {
    isLoaded = 0;
    (void) unLoadLib(h);
  }
  unlock(libMutex);
  return 1;
} /* {{ apidef.Prefix }}LibraryUnload */

int  {{ apidef.Prefix }}CorrectLibraryVersion(char *msgBuf, int msgBufLen)
{
  int cl;
  char localBuf[256];

  if (msgBuf && msgBufLen) msgBuf[0] = '\0';

  if (! isLoaded) {
    strncpy(msgBuf, "Library needs to be initialized first", msgBufLen);
    return 0;
  }

  if (NULL == {{ apidef.prexfix }}APIVersion) {
    strncpy(msgBuf, "Function {{ apidef.prexfix }}APIVersion not found", msgBufLen);
    return 0;
  }

  {{ apidef.prexfix }}APIVersion({{ apidef.Prefix.upper() }}APIVERSION,localBuf,&cl);
  strncpy(msgBuf, localBuf, msgBufLen);

  if (1 == cl)
    return 1;
  else
    return 0;
}

int {{ apidef.Prefix }}GetScreenIndicator(void)
{
  return ScreenIndicator;
}

void {{ apidef.Prefix }}SetScreenIndicator(int scrind)
{
  ScreenIndicator = scrind ? 1 : 0;
}

int {{ apidef.Prefix }}GetExceptionIndicator(void)
{
   return ExceptionIndicator;
}

void {{ apidef.Prefix }}SetExceptionIndicator(int excind)
{
  ExceptionIndicator = excind ? 1 : 0;
}

int {{ apidef.Prefix }}GetExitIndicator(void)
{
  return ExitIndicator;
}

void {{ apidef.Prefix }}SetExitIndicator(int extind)
{
  ExitIndicator = extind ? 1 : 0;
}

{{ apidef.Prefix }}ErrorCallback_t {{ apidef.Prefix }}GetErrorCallback(void)
{
  return ErrorCallBack;
}

void {{ apidef.Prefix }}SetErrorCallback({{ apidef.Prefix }}ErrorCallback_t func)
{
  lock(exceptMutex);
  ErrorCallBack = func;
  unlock(exceptMutex);
}

int {{ apidef.Prefix }}GetAPIErrorCount(void)
{
  return APIErrorCount;
}

void {{ apidef.Prefix }}SetAPIErrorCount(int ecnt)
{
  APIErrorCount = ecnt;
}

void {{ apidef.Prefix }}ErrorHandling(const char *msg)
{
  APIErrorCount++;
  if (ScreenIndicator) { printf("%s\n", msg); fflush(stdout); }
  lock(exceptMutex);
  if (ErrorCallBack)
    if (ErrorCallBack(APIErrorCount, msg)) { unlock(exceptMutex); exit(123); }
  unlock(exceptMutex);
  assert(!ExceptionIndicator);
  if (ExitIndicator) exit(123);
}

{% endblock -%}
